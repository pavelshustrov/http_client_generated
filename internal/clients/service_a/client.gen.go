// Package service_a provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package service_a

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCreateMessageError ErrorCode = 1000
)

// AllInOneDataResponse defines model for AllInOneDataResponse.
type AllInOneDataResponse struct {
	AuthorId   string    `json:"authorId"`
	CreatedAt  time.Time `json:"createdAt"`
	MessageId  string    `json:"messageId"`
	Name       string    `json:"name"`
	QueryParam *string   `json:"queryParam,omitempty"`
}

// AllInOneResponse defines model for AllInOneResponse.
type AllInOneResponse struct {
	Data  *AllInOneDataResponse `json:"data,omitempty"`
	Error *Error                `json:"error,omitempty"`
}

// BodyRequest defines model for BodyRequest.
type BodyRequest struct {
	MessageBody string `json:"messageBody"`
}

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode int

// AcceptLanguage defines model for AcceptLanguage.
type AcceptLanguage = string

// CustomerName defines model for CustomerName.
type CustomerName = string

// QueryParam defines model for QueryParam.
type QueryParam = string

// XIDHeader defines model for XIDHeader.
type XIDHeader = openapi_types.UUID

// PostAllInOneNameParams defines parameters for PostAllInOneName.
type PostAllInOneNameParams struct {
	// Query The search query.
	Query *QueryParam `form:"query,omitempty" json:"query,omitempty"`

	// XID The user ID.
	XID XIDHeader `json:"X-ID"`

	// AcceptLanguage User selected language
	AcceptLanguage *AcceptLanguage `json:"Accept-Language,omitempty"`
}

// PostAllInOneNameJSONRequestBody defines body for PostAllInOneName for application/json ContentType.
type PostAllInOneNameJSONRequestBody = BodyRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAllInOneNameWithBody request with any body
	PostAllInOneNameWithBody(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAllInOneName(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, body PostAllInOneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAllInOneNameWithBody(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAllInOneNameRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAllInOneName(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, body PostAllInOneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAllInOneNameRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAllInOneNameRequest calls the generic PostAllInOneName builder with application/json body
func NewPostAllInOneNameRequest(server string, name CustomerName, params *PostAllInOneNameParams, body PostAllInOneNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAllInOneNameRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPostAllInOneNameRequestWithBody generates requests for PostAllInOneName with any type of body
func NewPostAllInOneNameRequestWithBody(server string, name CustomerName, params *PostAllInOneNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/all-in-one/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ID", runtime.ParamLocationHeader, params.XID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-ID", headerParam0)

		if params.AcceptLanguage != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAllInOneNameWithBodyWithResponse request with any body
	PostAllInOneNameWithBodyWithResponse(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAllInOneNameResponse, error)

	PostAllInOneNameWithResponse(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, body PostAllInOneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAllInOneNameResponse, error)
}

type PostAllInOneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllInOneResponse
}

// Status returns HTTPResponse.Status
func (r PostAllInOneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAllInOneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAllInOneNameWithBodyWithResponse request with arbitrary body returning *PostAllInOneNameResponse
func (c *ClientWithResponses) PostAllInOneNameWithBodyWithResponse(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAllInOneNameResponse, error) {
	rsp, err := c.PostAllInOneNameWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAllInOneNameResponse(rsp)
}

func (c *ClientWithResponses) PostAllInOneNameWithResponse(ctx context.Context, name CustomerName, params *PostAllInOneNameParams, body PostAllInOneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAllInOneNameResponse, error) {
	rsp, err := c.PostAllInOneName(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAllInOneNameResponse(rsp)
}

// ParsePostAllInOneNameResponse parses an HTTP response from a PostAllInOneNameWithResponse call
func ParsePostAllInOneNameResponse(rsp *http.Response) (*PostAllInOneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAllInOneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllInOneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
